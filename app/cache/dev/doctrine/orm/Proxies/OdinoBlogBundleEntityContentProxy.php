<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class OdinoBlogBundleEntityContentProxy extends \Odino\BlogBundle\Entity\Content implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setTitle($title)
    {
        $this->_load();
        return parent::setTitle($title);
    }

    public function getTitle()
    {
        $this->_load();
        return parent::getTitle();
    }

    public function setIntro($intro)
    {
        $this->_load();
        return parent::setIntro($intro);
    }

    public function getIntro()
    {
        $this->_load();
        return parent::getIntro();
    }

    public function getIsActive()
    {
        $this->_load();
        return parent::getIsActive();
    }

    public function setIsActive($isActive)
    {
        $this->_load();
        return parent::setIsActive($isActive);
    }

    public function getBody()
    {
        $this->_load();
        return parent::getBody();
    }

    public function setBody($body)
    {
        $this->_load();
        return parent::setBody($body);
    }

    public function getKeywords()
    {
        $this->_load();
        return parent::getKeywords();
    }

    public function setKeywords($keywords)
    {
        $this->_load();
        return parent::setKeywords($keywords);
    }

    public function getPublishedAt()
    {
        $this->_load();
        return parent::getPublishedAt();
    }

    public function setPublishedAt($publishedAt)
    {
        $this->_load();
        return parent::setPublishedAt($publishedAt);
    }

    public function getSlug()
    {
        $this->_load();
        return parent::getSlug();
    }

    public function isAged()
    {
        $this->_load();
        return parent::isAged();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'intro', 'isActive', 'body', 'keywords', 'publishedAt');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}